using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace wolfPawRandom
{
	public class Randomizer
	{
		private readonly RandomMatrix _rm = null;
		public RandomMatrix Rm { get => _rm; }
		private int _keyLength = 0;
		public int KeyLength { get => _keyLength; }
		private Stopwatch _sw = new Stopwatch();
		private ulong _initialSeed = 0;
		private ulong _original_initial_seed = 0;
		
		/// <summary>
		/// Handles the randomization of data using a RandomMatrix object
		/// </summary>
		/// <param name="InitialSeed">Initial Seed to use for randomization. If 0 seed will be autogenerated</param>
		public Randomizer(ulong InitialSeed = 0, int KeyLength = 4)
		{
			_sw.Start();

			_rm = new RandomMatrix();

			regenerateSeed(InitialSeed);

			_keyLength = KeyLength;


#if DEBUG
			("Generation done in: " + _sw.Elapsed.TotalSeconds + "s...").writel(Extensions.col.yellow);
#endif
			
			_sw.Stop();
		}

		public void setKeyLength(int Length)
		{
			if(Length < 1) { return; }
			_keyLength = Length;
		}

		/// <summary>
		/// Generates new random seed
		/// </summary>
		public void regenerateSeed(ulong InitialSeed = 0)
		{
			_initialSeed = 0;
			while (_initialSeed == 0) { _initialSeed = generateSeed(); }
			("Initial Seed: ".PadRight(20) + _initialSeed).writel(Extensions.col.green);
			"Seed Color Code: ".PadRight(20).cW(); _initialSeed.ColorCode();
			_original_initial_seed = _initialSeed;
		}

		/// <summary>
		/// Generates random initial seed from initialization vectors from the RandomMatrix
		/// </summary>
		/// <returns></returns>
		public ulong generateSeed()
		{
			ulong initialSeed;
			int len = _rm.collection.randAdditionalTable.Length;
			var v1 = _rm.collection.randAdditionalTable[new Random().Next(0, len / 3)];
			var v2 = _rm.collection.randAdditionalTable[new Random().Next(len / 3, len / 3 + len / 3)];
			string tmp = "";
			Regex r = new Regex(@"(\d+)", RegexOptions.Multiline | RegexOptions.IgnoreCase | RegexOptions.ECMAScript);

			foreach (Match m in r.Matches(v1))
			{
				tmp += m.Groups[0].Value;
			}

			foreach (Match m in r.Matches(v2))
			{
				tmp += m.Groups[0].Value;
			}

			if (String.Empty.larger(tmp, ulong.MaxValue.ToString()) == tmp)
			{ tmp = tmp.Substring(0, ulong.MaxValue.ToString().Length - 1); }

			UInt64.TryParse(tmp, out initialSeed);
			return initialSeed;
		}
		
		private void rotateSeed()
		{
			string s = _initialSeed.ToString();
			s = s.Substring(3) + s.Substring(0, 3);
			ulong.TryParse(s, out _initialSeed);

			if(_initialSeed == _original_initial_seed)
			{
				s = s.Substring(1) + s[0];
			}
			ulong.TryParse(s, out _initialSeed);

#if DEBUG
			("Seed rotated".PadRight(20) + _initialSeed).ceWL("Yellow");
#endif
		}

		private string getKey()
		{
			string k = _initialSeed.ToString().Substring(0, _keyLength);
			rotateSeed();
			return k;
		}

		private int INT(Char c)
		{
			return Convert.ToInt32(c.ToString());
		}

		public int randomInt()
		{
			string k = getKey();
			int[] vals = new int[_keyLength];
			for(int i = 0; i < _keyLength; i++){ vals[i] = (INT(k[i]) + 1); }
			int key = vals.Sum();
			key *= vals.First();
			key *= vals.Last();
			
			//TODO: befejezni a generálást

			return 0;
		}
	}
}
